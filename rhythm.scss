@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:list";

// ------------------ //
//  Global Variables  //
// ------------------ //

$global-baseline: 0 !default;
$global-rhythm-size: 8px !default;
$global-rem-size: 16px !default;

// ---------------------- //
//  Validation Functions  //
// ---------------------- //

@function _validate-font-size($value) {
  @if meta.type-of($value) == number {
    @return $value;
  } @else if $value == null {
    @error "The font-size value is not provided.";
  } @else {
    @error "Invalid font-size value: #{$value}.";
  }
}

@function _validate-rhythm-grids($value) {
  @if _is-unitless-integer($value) {
    @return $value;
  } @else {
    @error "Invalid $rhythm-grids value: #{$value}. It must be unitless positive integer.";
  }
}

@function _validate-line-height($value) {
  @if _is-unitless-integer($value) {
    @return $value;
  } @else if $value == null {
    @error "The line-height value is not provided.";
  } @else {
    @error "Invalid line-height value: #{$value}. The line-height map key represents the numbers of rhythm grids, it must be unitless positive integer.";
  }
}

@function _validate-baseline($value) {
  @if meta.type-of($value) == number and $value > 0 and $value < 1 {
    @return $value;
  } @else {
    @error "Invalid baseline ratio: #{$value}. It must be decimal number between 0 and 1.";
  }
}

@function _validate-property($used-property, $property) {
  @if $used-property == null or $used-property == $property {
    @return $property;
  } @else {
    @error "Can not calculate rhythms for both #{$used-property} and #{$property} at the same time.";
  }
}

// ------------------ //
//  Helper Functions  //
// ------------------ //

@function _is-unitless-integer($value) {
  @return meta.type-of($value) == number and math.is-unitless($value) and $value > 0 and $value % 1 == 0;
}

@function _convert-unit($value) {
  @if math.unit($value) == math.unit($global-rhythm-size) {
    @return $value;
  } @else if math.unit($value) == rem and math.unit($global-rhythm-size) == px {
    @return $value / 1rem * $global-rem-size;
  } @else if math.unit($value) == px and math.unit($global-rhythm-size) == rem {
    @return $value / $global-rem-size * 1rem;
  } @else {
    @error "Can not calculate font-size and line-height with different units.";
  }
}

@function _first($list) {
  @return list.nth($list, 1);
}

@function _rest($list) {
  $_result: ();

  @if list.length($list) >= 2 {
    @for $i from 2 through list.length($list) {
      $_result: list.append($_result, list.nth($list, $i));
    }
  }

  @return $_result;
}

@function _calc-bottom-font-height($font-map) {
  $_font-size: _validate-font-size(map.get($font-map, font-size));
  $_font-size: _convert-unit($_font-size);
  $_line-height: _validate-line-height(map.get($font-map, line-height));
  $_baseline: _validate-baseline(map.get($font-map, baseline) or $global-baseline);
  $_half-space: ($global-rhythm-size * $_line-height - $_font-size) / 2;
  $_baseline-height: $_font-size * $_baseline;

  @return math.round($_half-space + $_baseline-height);
}

@function _calc-top-font-height($font-map) {
  $_font-size: _validate-font-size(map.get($font-map, font-size));
  $_font-size: _convert-unit($_font-size);
  $_line-height: _validate-line-height(map.get($font-map, line-height));
  $_baseline: _validate-baseline(map.get($font-map, baseline) or $global-baseline);
  $_half-space: ($global-rhythm-size * $_line-height - $_font-size) / 2;
  $_baseline-height: $_font-size * (1 - $_baseline);

  @return math.round($_half-space + $_baseline-height);
}

@function _calc-height($height, $offset) {
  @if $offset == 0 {
    @return $height;
  } @else if math.unit($height) == math.unit($offset) {
    @return $height + $offset;
  } @else if $offset > 0 {
    @return calc(#{$height} + #{$offset});
  } @else {
    @return calc(#{$height} - #{math.abs($offset)});
  }
}

// ----------- //
//  Functions  //
// ----------- //

@function rhythm($rhythm-grids, $offset: 0) {
  $_grids: _validate-rhythm-grids($rhythm-grids);

  @return _calc-height($global-rhythm-size * $_grids, $offset);
}

@function baseline-top($font-map, $rhythm-grids, $offset: 0) {
  $_grids: _validate-rhythm-grids($rhythm-grids);

  @return _calc-height($global-rhythm-size * $_grids - _calc-top-font-height($font-map), $offset);
}

@function baseline-bottom($font-map, $rhythm-grids, $offset: 0) {
  $_grids: _validate-rhythm-grids($rhythm-grids);

  @return _calc-height($global-rhythm-size * $_grids - _calc-bottom-font-height($font-map), $offset);
}

@function baseline-between($above-font-map, $below-font-map, $rhythm-grids, $offset: 0) {
  $_grids: _validate-rhythm-grids($rhythm-grids);

  @return _calc-height(baseline-bottom($above-font-map, $_grids) - _calc-top-font-height($below-font-map), $offset);
}

// -------- //
//  Mixins  //
// -------- //

@mixin font($font-map, $properties-map: ()) {
  $_font-size: _validate-font-size(map.get($font-map, font-size));
  $_grids: _validate-line-height(map.get($font-map, line-height));

  font-size: $_font-size;
  line-height: $global-rhythm-size * $_grids;

  @each $_property in map.keys(map.remove($font-map, font-size, line-height, baseline)) {
    #{$_property}: map.get($font-map, $_property);
  }

  $_used-top-property: null;
  $_used-bottom-property: null;

  @each $_property in map.keys($properties-map) {
    $_value: map.get($properties-map, $_property);

    @if $_property == margin-top or $_property == padding-top {
      $_used-top-property: _validate-property($_used-top-property, $_property);

      @if meta.type-of(_first($_value)) == map {
        #{$_property}: baseline-between(_first($_value), $font-map, _rest($_value) ...);
      } @else {
        #{$_property}: baseline-top($font-map, $_value...);
      }
    } @else if $_property == margin-bottom or $_property == padding-bottom {
      $_used-bottom-property: _validate-property($_used-bottom-property, $_property);

      @if meta.type-of(_first($_value)) == map {
        #{$_property}: baseline-between($font-map, _first($_value), _rest($_value) ...);
      } @else {
        #{$_property}: baseline-bottom($font-map, $_value...);
      }
    } @else {
      @error "Unsupported property #{$_property} in $properties-map.";
    }
  }
}
