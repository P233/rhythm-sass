@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:list";

// Global variables
// ----------------
$global-baseline: 0 !default;
$global-rhythm-size: 8px !default;

// Helper functions
// ----------------
@function _first($list) {
  @return list.nth($list, 1);
}

@function _rest($list) {
  $_result: ();

  @if list.length($list) < 2 {
    @return ();
  }

  @for $i from 2 through list.length($list) {
    $_result: list.append($_result, list.nth($list, $i));
  }

  @return $_result;
}

@function _calc-baseline-from-bottom($font-map) {
  $_font-size: map.get($font-map, font-size);
  $_line-height: map.get($font-map, line-height);
  $_baseline: map.get($font-map, baseline) or $global-baseline;
  $_half-space: ($_line-height * $global-rhythm-size - $_font-size) / 2;
  $_baseline-height: $_font-size * $_baseline;

  @return math.round($_half-space + $_baseline-height);
}

@function _calc-baseline-from-top($font-map) {
  $_line-height: map.get($font-map, line-height) * $global-rhythm-size;

  @return $_line-height - _calc-baseline-from-bottom($font-map);
}

@function _calc-baseline-offset($font-map) {
  $_baseline-from-bottom: _calc-baseline-from-bottom($font-map);

  @return $_baseline-from-bottom % $global-rhythm-size;
}

@function _calc-offset($rhythm, $offset) {
  @if $offset == 0 {
    @return $rhythm;
  } @else if math.unit($rhythm) == math.unit($offset) {
    @return $rhythm + $offset;
  } @else {
    @return calc(#{$rhythm} - #{$offset});
  }
}

@function _validate-property($property-placeholder, $property) {
  @if not $property-placeholder or $property-placeholder == $property {
    @return $property;
  } @else {
    @error "Can not calculate rhythms for both #{$property-placeholder} and #{$property} at the same time.";
  }
}

// Functions
// ----------------
@function rhythm($rhythm-steps, $offset: 0) {
  @return _calc-offset($rhythm-steps * $global-rhythm-size, $offset);
}

@function top-rhythm($font-map, $rhythm-steps, $offset: 0) {
  $_baseline-offset: _calc-baseline-offset($font-map);

  @if $_baseline-offset == 0 {
    @return rhythm($rhythm-steps, $offset);
  } @else if $rhythm-steps > 0 {
    $_rhythm: ($rhythm-steps - 1) * $global-rhythm-size + $_baseline-offset;

    @return _calc-offset($_rhythm, $offset);
  } @else if $rhythm-steps < 0 {
    $_rhythm: -(math.abs($rhythm-steps) * $global-rhythm-size - $_baseline-offset);

    @return _calc-offset($_rhythm, $offset);
  } @else {
    @return $offset;
  }
}

@function bottom-rhythm($font-map, $rhythm-steps, $offset: 0) {
  $_baseline-offset: _calc-baseline-offset($font-map);

  @if $_baseline-offset == 0 {
    @return rhythm($rhythm-steps, $offset);
  } @else if $rhythm-steps > 0 {
    $_rhythm: $rhythm-steps * $global-rhythm-size - $_baseline-offset;

    @return _calc-offset($_rhythm, $offset);
  } @else if $rhythm-steps < 0 {
    $_rhythm: -((math.abs($rhythm-steps) - 1) * $global-rhythm-size + $_baseline-offset);

    @return _calc-offset($_rhythm, $offset);
  } @else {
    @return $offset;
  }
}

@function mid-rhythm($top-font-map, $bottom-font-map, $rhythm-steps, $offset: 0) {
  @if $rhythm-steps < 1 {
    @error "The $rhythm-steps between two elements must larger or equal to 1, but the given value is #{$rhythm-steps}.";
  }

  $_top-font-bottom-rhythm: bottom-rhythm($top-font-map, $rhythm-steps);
  $_bottom-font-baseline-from-top: _calc-baseline-from-top($bottom-font-map);
  $_rhythm: $_top-font-bottom-rhythm - $_bottom-font-baseline-from-top;

  @return _calc-offset($_rhythm, $offset);
}

// Mixins
// ----------------
@mixin font($font-map, $properties-map) {
  line-height: rhythm(map.get($font-map, line-height));

  @each $_property in map.keys(map.remove($font-map, line-height, baseline)) {
    #{$_property}: map.get($font-map, $_property);
  }

  $_top-property: null;
  $_bottom-property: null;

  @each $_property in map.keys($properties-map) {
    $_value: map.get($properties-map, $_property);

    @if $_property == margin-top or $_property == padding-top {
      $_top-property: _validate-property($_top-property, $_property);

      @if meta.type-of(_first($_value)) == map {
        // prettier-ignore
        #{$_property}: mid-rhythm(_first($_value), $font-map, _rest($_value) ...);
      } @else {
        #{$_property}: top-rhythm($font-map, $_value...);
      }
    } @else if $_property == margin-bottom or $_property == padding-bottom {
      $_bottom-property: _validate-property($_bottom-property, $_property);

      @if meta.type-of(_first($_value)) == map {
        // prettier-ignore
        #{$_property}: mid-rhythm($font-map, _first($_value), _rest($_value) ...);
      } @else {
        #{$_property}: bottom-rhythm($font-map, $_value...);
      }
    } @else {
      @error "Unsupported property #{$_property} in `$properties-map`.";
    }
  }
}
