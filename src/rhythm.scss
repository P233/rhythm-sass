@use "lib";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

// ------------------ //
//  Global Variables  //
// ------------------ //

$baseline-ratio: null !default;
@if not lib.is-valid-baseline-ratio($baseline-ratio) {
  @error "Invalid $baseline-ratio: `#{meta.inspect($baseline-ratio)}`. It should be a decimal between 0 and 1, exclusive.";
}

$rhythm-size: 8px !default;
@if meta.type-of($rhythm-size) != number or not lib.has-valid-unit($rhythm-size) {
  @error "Invaild $rhythm-size: `#{meta.inspect($rhythm-size)}`. It should be a number in absolute length unit or the rem unit.";
}

$rem-size: 16px !default;
@if meta.type-of($rem-size) != number or not lib.has-valid-unit($rem-size) {
  @error "Invaild $rem-size: `#{meta.inspect($rem-size)}`. It should be a number in an absolute length unit or the rem unit.";
}

$__config: (
  baseline-ratio: $baseline-ratio,
  rhythm-size: $rhythm-size,
  rem-size: $rem-size
);

// ------------------ //
//  Rhythm Functions  //
// ------------------ //

@function rhythm($rhythms, $offset: 0) {
  $_rhythms: lib.validate-rhythms($rhythms);
  $_height: $rhythm-size * $_rhythms;
  $_offset: lib.validate-offset($offset);

  @return lib.calc-height-with-offset($_height, $_offset);
}

@function rhythm-top($font-map, $rhythms, $offset: 0) {
  $_font-map: lib.validate-font-map($font-map);
  $_rhythms: lib.validate-rhythms($rhythms);
  $_height: $rhythm-size * $_rhythms - lib.calc-baseline-height($_font-map, "bottom", $__config);
  $_offset: lib.validate-offset($offset);

  @return lib.calc-height-with-offset($_height, $_offset);
}

@function rhythm-bottom($font-map, $rhythms, $offset: 0) {
  $_font-map: lib.validate-font-map($font-map);
  $_rhythms: lib.validate-rhythms($rhythms);
  $_height: $rhythm-size * $_rhythms - lib.calc-baseline-height($_font-map, "top", $__config);
  $_offset: lib.validate-offset($offset);

  @return lib.calc-height-with-offset($_height, $_offset);
}

@function baseline-top($font-map, $rhythms, $offset: 0) {
  @return rhythm-bottom($font-map, $rhythms, $offset);
}

@function baseline-bottom($font-map, $rhythms, $offset: 0) {
  @return rhythm-top($font-map, $rhythms, $offset);
}

@function baseline-between($font-map-above, $font-map-below, $rhythms, $offset: 0) {
  $_font-map-above: lib.validate-font-map($font-map-above);
  $_font-map-below: lib.validate-font-map($font-map-below);
  $_rhythms: lib.validate-rhythms($rhythms);
  $_height: baseline-bottom($_font-map-above, $_rhythms) - lib.calc-baseline-height($_font-map-below, "top", $__config);
  $_offset: lib.validate-offset($offset);

  @return lib.calc-height-with-offset($_height, $_offset);
}

// -------- //
//  Mixins  //
// -------- //

@mixin font($font-map, $properties-map: ()) {
  $_font-map: lib.validate-font-map($font-map);

  font-size: map.get($_font-map, font-size);
  line-height: $rhythm-size * map.get($_font-map, line-height);

  @each $_property in map.keys(map.remove($_font-map, font-size, line-height, baseline-ratio)) {
    #{$_property}: map.get($_font-map, $_property);
  }

  @each $_property, $_value in $properties-map {
    @if $_property == margin-top or $_property == padding-top {
      @if meta.type-of(lib.first($_value)) == map {
        $_params: lib.rest($_value);

        #{$_property}: baseline-between(lib.first($_value), $_font-map, $_params...);
      } @else {
        #{$_property}: baseline-top($_font-map, $_value...);
      }
    } @else if $_property == margin-bottom or $_property == padding-bottom {
      @if meta.type-of(lib.first($_value)) == map {
        $_params: lib.rest($_value);

        #{$_property}: baseline-between($_font-map, lib.first($_value), $_params...);
      } @else {
        #{$_property}: baseline-bottom($_font-map, $_value...);
      }
    } @else {
      @error "Unsupported property `#{meta.inspect($_property)}` in #{meta.inspect($properties-map)}.";
    }
  }
}

@mixin draw-rhythms() {
  :root {
    position: relative;

    &::after {
      content: "";
      position: absolute;
      z-index: 1000000;
      inset: 0;
      pointer-events: none;
      background-image: linear-gradient(to bottom, rgb(255 120 120 / 25%) $rhythm-size, transparent $rhythm-size);
      background-size: 100% ($rhythm-size * 2);
    }
  }
}
